#! @BASH@

#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.
#
#  See the COPYING and AUTHORS files for more details.

# Read in library functions
if [ "$(type -t patch_file_name)" != function ]
then
	if ! [ -r @SCRIPTS@/patchfns ]
	then
		echo "Cannot read library @SCRIPTS@/patchfns" >&2
		exit 1
	fi
	. @SCRIPTS@/patchfns
fi

usage()
{
	echo $"Usage: quilt import [-f] [-p num] [-n patch] [patchfile]"
	if [ x$1 = x-h ]
	then
		echo $"
Import an external patch.  If a patch file name is specified, the patch
will be stored in this relative path in the patches/ directory.  Else,
if an input file name is given this name is used as the patch name.

-p num
	Number of directory levels to strip when aplying (default=1)

-n patch
	File name relative to patches/ to use.

-f	Overwite/update existing patches."
		exit 0
	else
		exit 1
	fi
}

options=`getopt -o fn:p:h -- "$@"`

if [ $? -ne 0 ]
then
        usage
fi

eval set -- "$options"

while true
do
        case "$1" in
        -n)
		opt_patch=${2#$QUILT_PATCHES/}
		shift 2 ;;
	-p)
		opt_strip=$2
		shift 2 ;;
	-f)
		opt_force=1
		shift ;;
	-h)
		usage -h ;;
        --)
                shift
		break ;;
        esac
done

if [ $# -eq 1 ]
then
	input_file=$1
elif [ $# -gt 1 ]
then
        usage
fi

[ -n "$opt_strip" ] && patch_args="-p$opt_strip"

if [ -n "$opt_patch" ]
then
	patch="$opt_patch"
elif [ -n "$input_file" ]
then
	patch="$input_file"
else
	echo $"Please use -n to specify a patch file name."
	exit 1
fi

if is_applied $patch
then
	echo $"Patch $patch is applied."
	exit 1
fi

if [ -e "$QUILT_PATCHES/$patch" ]
then
	if [ -z "$opt_force" ]
	then
		echo $"Patch $patch exists. Replace with -f."
		exit 1
	fi
	echo $"Replacing patch $patch with new version"
else
	echo $"Importing patch $patch (stored as $patch)"
fi
if [ -n "$input_file" ]
then
	cp "$input_file" "$QUILT_PATCHES/$patch"
else
	cat > "$QUILT_PATCHES/$patch"
fi
if [ $? -ne 0 ]
then
	echo $"Failed to import patch $patch"
	exit 1
fi

if ! patch_in_series $patch &&
   ! insert_in_series $opt_patch "$patch_args"
then
	echo $"Failed to insert $patch in file series."
fi

rm -rf $QUILT_PC/$patch
### Local Variables:
### mode: shell-script
### End:
# vim:filetype=sh
