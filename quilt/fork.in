#! @BASH@

#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.
#
#  See the COPYING and AUTHORS files for more details.

# Read in library functions
if [ "$(type -t patch_file_name)" != function ]
then
	if ! [ -r @SCRIPTS@/patchfns ]
	then
		echo "Cannot read library @SCRIPTS@/patchfns" >&2
		exit 1
	fi
	. @SCRIPTS@/patchfns
fi

usage()
{
	printf $"Usage: quilt fork [new_name]\n"
	if [ x$1 = x-h ]
	then
		printf $"
Fork the topmost patch. If new_name is missing, the name of the
forked patch will be the current patch name, followed by \"-2\".
If the patch name already ends in a dash-and-number, the number is
further incremented (e.g., patch.diff, patch-2.diff, patch-3.diff).
"
		exit 0
	else
		exit 1
	fi
}

options=`getopt -o h -- "$@"`

if [ $? -ne 0 ]
then
	usage
fi

eval set -- "$options"

while true
do
	case "$1" in
	-h)
		usage -h ;;
	--)
		shift
		break ;;
	esac
done

if [ $# -gt 1 ]
then
	usage
fi

top_patch=$(top_patch)
if [ -z "$top_patch" ]
then
	printf $"No patches applied\n" >&2
	exit 1
fi

if [ $# -eq 1 ]
then
	new_patch="$1"
else
	set -- $(echo "$top_patch" \
		 | @SED@ -e 's: :\ :g' -e 's:-\([0-9]\+\)$: \1:')
	if [ $# -eq 1 ]; then
		new_patch="$1-2"
	else
		new_patch="$1-$[$2+1]"
	fi
	base=$(echo $top_patch \
	       | @SED@ -e 's:\(\|\.diff\?\|\.patch\)\(\|\.gz\|\.bz2\)$::')
	new_patch="$new_patch${top_patch#$base}"
fi

new_patch=${new_patch#$QUILT_PATCHES/}

if patch_in_series $new_patch || \
   [ -d "$QUILT_PC/$new_patch" ] || \
   [ -e "$(patch_file_name $new_patch)" ]
then
	printf $"Patch %s exists already, please choose a new name\n" \
	       "$(print_patch $new_patch)" >&2
	exit 1
fi

if ! rename_in_db "$top_patch" "$new_patch" || \
   ! rename_in_series "$top_patch" "$new_patch" || \
   ! mv "$QUILT_PC/$top_patch" "$QUILT_PC/$new_patch" || \
   ( [ -e "$(patch_file_name $top_patch)" ] && \
     ! cp -p "$(patch_file_name $top_patch)" \
	     "$(patch_file_name $new_patch)" )
then
	printf $"Fork of patch %s to patch %s failed\n" \
	       "$(print_patch $top_patch)" \
	       "$(print_patch $new_patch)" >&2
	exit 1
fi

printf $"Fork of patch %s created as %s\n" \
       "$(print_patch $top_patch)" \
       "$(print_patch $new_patch)"

### Local Variables:
### mode: shell-script
### End:
# vim:filetype=sh
