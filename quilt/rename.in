#! @BASH@

#  This script is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.
#
#  See the COPYING and AUTHORS files for more details.

# Read in library functions
if [ "$(type -t patch_file_name)" != function ]
then
	if ! [ -r @SCRIPTS@/patchfns ]
	then
		echo "Cannot read library @SCRIPTS@/patchfns" >&2
		exit 1
	fi
	. @SCRIPTS@/patchfns
fi

usage()
{
	printf $"Usage: quilt rename [-p patch] new_name\n"
	if [ x$1 = x-h ]
	then
		printf $"
Rename the topmost or named patch.

-p patch
	Patch to rename.
"
		exit 0
	else
		exit 1
	fi
}

options=`getopt -o p:h -- "$@"`

if [ $? -ne 0 ]
then
	usage
fi

eval set -- "$options"

while true
do
	case "$1" in
	-p)
		if ! patch=$(find_patch $2)
		then
			printf $"Patch %s is not in series\n" "$2" >&2
			exit 1
		fi
		shift 2 ;;
	-h)
		usage -h ;;
	--)
		shift
		break ;;
	esac
done

if [ $# -ne 1 ]
then
	usage
fi

if [ ! -n "$patch" ]
then
	patch=$(top_patch)
	if [ -z "$patch" ]
	then
		printf $"No patches applied\n" >&2
		exit 1
	fi
fi

new_patch=${1#$QUILT_PATCHES/}

if patch_in_series $new_patch || \
   [ -d "$QUILT_PC/$new_patch" ] || \
   [ -e "$(patch_file_name $new_patch)" ]
then
	printf $"Patch %s exists already, please choose a different name\n" \
	       "$(print_patch $new_patch)" >&2
	exit 1
fi

if ( is_applied $patch && \
     ( ! rename_in_db "$patch" "$new_patch" || \
       ! mv "$QUILT_PC/$patch" "$QUILT_PC/$new_patch" ) ) || \
   ! rename_in_series "$patch" "$new_patch" || \
   ( [ -e "$(patch_file_name $patch)" ] && \
     ! mv "$(patch_file_name $patch)" \
	  "$(patch_file_name $new_patch)" )
then
	printf $"Renaming of patch %s to %s failed\n" \
	       "$(print_patch $patch)" \
	       "$(print_patch $new_patch)" >&2
	exit 1
fi

printf $"Patch %s renamed to %s\n" \
       "$(print_patch $patch)" \
       "$(print_patch $new_patch)"

### Local Variables:
### mode: shell-script
### End:
# vim:filetype=sh
